import pytest
import os
import json
from pathlib import Path

def test_owasp_zap_report_exists():
    """Test that OWASP ZAP report exists"""
    
    # Check for OWASP ZAP report files
    owasp_files = [
        "docs/security/owasp_report.html",
        "docs/security/owasp_report.json",
        "scripts/security/owasp_zap_scan.html",
        "scripts/security/owasp_zap_scan.json"
    ]
    
    found_files = []
    for file_path in owasp_files:
        if os.path.exists(file_path):
            found_files.append(file_path)
    
    # At least one OWASP report should exist
    assert len(found_files) > 0, f"No OWASP ZAP reports found. Checked: {owasp_files}"

def test_nikto_report_exists():
    """Test that Nikto report exists"""
    
    # Check for Nikto report files
    nikto_files = [
        "docs/security/nikto_report.html",
        "docs/security/nikto_report.json",
        "scripts/security/nikto_scan.html",
        "scripts/security/nikto_scan.json"
    ]
    
    found_files = []
    for file_path in nikto_files:
        if os.path.exists(file_path):
            found_files.append(file_path)
    
    # At least one Nikto report should exist
    assert len(found_files) > 0, f"No Nikto reports found. Checked: {nikto_files}"

def test_owasp_report_content():
    """Test that OWASP report contains at least 1 check"""
    
    # Find OWASP report file
    owasp_files = [
        "docs/security/owasp_report.json",
        "scripts/security/owasp_zap_scan.json"
    ]
    
    report_found = False
    for file_path in owasp_files:
        if os.path.exists(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # Check for various OWASP report structures
                if isinstance(data, dict):
                    # Check for alerts or issues
                    if 'alerts' in data and len(data['alerts']) > 0:
                        report_found = True
                        break
                    elif 'issues' in data and len(data['issues']) > 0:
                        report_found = True
                        break
                    elif 'results' in data and len(data['results']) > 0:
                        report_found = True
                        break
                    elif 'vulnerabilities' in data and len(data['vulnerabilities']) > 0:
                        report_found = True
                        break
                
            except (json.JSONDecodeError, UnicodeDecodeError):
                continue
    
    assert report_found, "No valid OWASP report with checks found"

def test_nikto_report_content():
    """Test that Nikto report contains at least 1 check"""
    
    # Find Nikto report file
    nikto_files = [
        "docs/security/nikto_report.json",
        "scripts/security/nikto_scan.json"
    ]
    
    report_found = False
    for file_path in nikto_files:
        if os.path.exists(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # Check for various Nikto report structures
                if isinstance(data, dict):
                    # Check for vulnerabilities or findings
                    if 'vulnerabilities' in data and len(data['vulnerabilities']) > 0:
                        report_found = True
                        break
                    elif 'findings' in data and len(data['findings']) > 0:
                        report_found = True
                        break
                    elif 'results' in data and len(data['results']) > 0:
                        report_found = True
                        break
                    elif 'issues' in data and len(data['issues']) > 0:
                        report_found = True
                        break
                
            except (json.JSONDecodeError, UnicodeDecodeError):
                continue
    
    assert report_found, "No valid Nikto report with checks found"

def test_owasp_html_report_content():
    """Test that OWASP HTML report contains security content"""
    
    # Find OWASP HTML report file
    owasp_html_files = [
        "docs/security/owasp_report.html",
        "scripts/security/owasp_zap_scan.html"
    ]
    
    report_found = False
    for file_path in owasp_html_files:
        if os.path.exists(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Check for security-related content
                if any(keyword in content.lower() for keyword in [
                    'vulnerability', 'alert', 'issue', 'security', 'owasp', 'zap'
                ]):
                    report_found = True
                    break
                
            except UnicodeDecodeError:
                continue
    
    assert report_found, "No valid OWASP HTML report with security content found"

def test_nikto_html_report_content():
    """Test that Nikto HTML report contains security content"""
    
    # Find Nikto HTML report file
    nikto_html_files = [
        "docs/security/nikto_report.html",
        "scripts/security/nikto_scan.html"
    ]
    
    report_found = False
    for file_path in nikto_html_files:
        if os.path.exists(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Check for security-related content
                if any(keyword in content.lower() for keyword in [
                    'vulnerability', 'finding', 'security', 'nikto', 'scan'
                ]):
                    report_found = True
                    break
                
            except UnicodeDecodeError:
                continue
    
    assert report_found, "No valid Nikto HTML report with security content found"

def test_security_scan_scripts_exist():
    """Test that security scan scripts exist"""
    
    # Check for security scan scripts
    script_files = [
        "scripts/security/owasp_zap_scan.ps1",
        "scripts/security/owasp_zap_scan.sh",
        "scripts/security/nikto_scan.ps1",
        "scripts/security/nikto_scan.sh"
    ]
    
    found_scripts = []
    for file_path in script_files:
        if os.path.exists(file_path):
            found_scripts.append(file_path)
    
    # At least some security scan scripts should exist
    assert len(found_scripts) > 0, f"No security scan scripts found. Checked: {script_files}"

def test_security_reports_directory_structure():
    """Test security reports directory structure"""
    
    # Check if security directory exists
    security_dirs = [
        "docs/security",
        "scripts/security"
    ]
    
    for dir_path in security_dirs:
        assert os.path.exists(dir_path), f"Security directory {dir_path} does not exist"

def test_bandit_security_report():
    """Test that Bandit security report exists"""
    
    # Check for Bandit report files
    bandit_files = [
        "docs/security/bandit_report.json",
        "docs/security/bandit_report.txt"
    ]
    
    found_files = []
    for file_path in bandit_files:
        if os.path.exists(file_path):
            found_files.append(file_path)
    
    # At least one Bandit report should exist
    assert len(found_files) > 0, f"No Bandit reports found. Checked: {bandit_files}"

def test_bandit_report_content():
    """Test that Bandit report contains security findings"""
    
    # Find Bandit report file
    bandit_files = [
        "docs/security/bandit_report.json",
        "docs/security/bandit_report.txt"
    ]
    
    report_found = False
    for file_path in bandit_files:
        if os.path.exists(file_path):
            try:
                if file_path.endswith('.json'):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    
                    # Check for Bandit JSON structure
                    if isinstance(data, dict) and 'results' in data:
                        if len(data['results']) > 0:
                            report_found = True
                            break
                
                elif file_path.endswith('.txt'):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Check for Bandit text content
                    if 'bandit' in content.lower() and ('issue' in content.lower() or 'warning' in content.lower()):
                        report_found = True
                        break
                
            except (json.JSONDecodeError, UnicodeDecodeError):
                continue
    
    assert report_found, "No valid Bandit report with findings found"

def test_security_audit_complete_documentation():
    """Test that security audit documentation exists"""
    
    # Check for security audit documentation
    audit_files = [
        "docs/security/SECURITY_AUDIT_COMPLETE.md",
        "docs/security/SECURITY_AUDIT_COMPLETE.md"
    ]
    
    found_files = []
    for file_path in audit_files:
        if os.path.exists(file_path):
            found_files.append(file_path)
    
    # Security audit documentation should exist
    assert len(found_files) > 0, f"No security audit documentation found. Checked: {audit_files}"

def test_security_scan_timestamp():
    """Test that security scan reports have recent timestamps"""
    
    import time
    from datetime import datetime, timedelta
    
    # Check for recent security reports (within last 30 days)
    security_files = [
        "docs/security/owasp_report.json",
        "docs/security/nikto_report.json",
        "docs/security/bandit_report.json"
    ]
    
    recent_files = []
    cutoff_time = datetime.now() - timedelta(days=30)
    
    for file_path in security_files:
        if os.path.exists(file_path):
            file_time = datetime.fromtimestamp(os.path.getmtime(file_path))
            if file_time > cutoff_time:
                recent_files.append(file_path)
    
    # At least one recent security report should exist
    assert len(recent_files) > 0, f"No recent security reports found (within 30 days). Checked: {security_files}"

def test_security_report_file_sizes():
    """Test that security reports have reasonable file sizes"""
    
    # Check file sizes of security reports
    security_files = [
        "docs/security/owasp_report.json",
        "docs/security/nikto_report.json",
        "docs/security/bandit_report.json"
    ]
    
    for file_path in security_files:
        if os.path.exists(file_path):
            file_size = os.path.getsize(file_path)
            # Reports should not be empty and not excessively large
            assert file_size > 100, f"Security report {file_path} is too small ({file_size} bytes)"
            assert file_size < 10 * 1024 * 1024, f"Security report {file_path} is too large ({file_size} bytes)"

def test_security_scan_coverage():
    """Test that security scans cover multiple areas"""
    
    # Check for different types of security scans
    scan_types = {
        'owasp': False,
        'nikto': False,
        'bandit': False
    }
    
    # Check OWASP scans
    if any(os.path.exists(f) for f in ["docs/security/owasp_report.json", "scripts/security/owasp_zap_scan.json"]):
        scan_types['owasp'] = True
    
    # Check Nikto scans
    if any(os.path.exists(f) for f in ["docs/security/nikto_report.json", "scripts/security/nikto_scan.json"]):
        scan_types['nikto'] = True
    
    # Check Bandit scans
    if any(os.path.exists(f) for f in ["docs/security/bandit_report.json", "docs/security/bandit_report.txt"]):
        scan_types['bandit'] = True
    
    # At least two different types of scans should be present
    active_scans = sum(scan_types.values())
    assert active_scans >= 2, f"Insufficient security scan coverage. Found: {active_scans} types"

def test_security_report_consistency():
    """Test that security reports are consistent"""
    
    # Check that if JSON report exists, it's valid JSON
    json_reports = [
        "docs/security/owasp_report.json",
        "docs/security/nikto_report.json",
        "docs/security/bandit_report.json"
    ]
    
    for file_path in json_reports:
        if os.path.exists(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    json.load(f)
                assert True  # Valid JSON
            except json.JSONDecodeError:
                assert False, f"Invalid JSON in security report: {file_path}" 