"""add missing tables and is_active to roles

Revision ID: f647434ed5ad
Revises: 0a43c1e9241f
Create Date: 2025-07-01 15:20:50.810589

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = 'f647434ed5ad'
down_revision: Union[str, None] = '0a43c1e9241f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_interactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('prompt', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('response', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('context', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('session_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('interaction_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('prompt_tokens', sa.Integer(), nullable=True),
    sa.Column('response_tokens', sa.Integer(), nullable=True),
    sa.Column('total_tokens', sa.Integer(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('error_message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ai_interactions_session_id'), 'ai_interactions', ['session_id'], unique=False)
    op.create_index(op.f('ix_ai_interactions_tenant_id'), 'ai_interactions', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_ai_interactions_user_id'), 'ai_interactions', ['user_id'], unique=False)
    op.create_table('bim_models',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('format', sa.Enum('IFC', 'RVT', 'DWG', 'DXF', 'SKP', 'PLN', name='bimformat'), nullable=False),
    sa.Column('software_origin', sa.Enum('REVIT', 'ARCHICAD', 'SKETCHUP', 'AUTOCAD', 'BLENDER', 'OTHER', name='bimsoftware'), nullable=False),
    sa.Column('level_of_detail', sa.Enum('LOD_100', 'LOD_200', 'LOD_300', 'LOD_400', 'LOD_500', name='bimlevelofdetail'), nullable=False),
    sa.Column('revision_date', sa.DateTime(), nullable=True),
    sa.Column('file_url', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('checksum', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('is_encrypted', sa.Boolean(), nullable=False),
    sa.Column('total_area', sa.Float(), nullable=True),
    sa.Column('total_volume', sa.Float(), nullable=True),
    sa.Column('floor_count', sa.Integer(), nullable=True),
    sa.Column('room_count', sa.Integer(), nullable=True),
    sa.Column('building_height', sa.Float(), nullable=True),
    sa.Column('project_author', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('project_organization', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('project_phase', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('coordinate_system', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('units', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('conversion_status', sa.Enum('PENDING', 'PROCESSING', 'VALIDATING', 'COMPLETED', 'FAILED', 'VALIDATION_FAILED', 'CLEANED', name='bimconversionstatus'), nullable=False),
    sa.Column('conversion_message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('conversion_progress', sa.Integer(), nullable=False),
    sa.Column('converted_file_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('validation_report_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('conversion_started_at', sa.DateTime(), nullable=True),
    sa.Column('conversion_completed_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_bim_models_name'), 'bim_models', ['name'], unique=False)
    op.create_index(op.f('ix_bim_models_tenant_id'), 'bim_models', ['tenant_id'], unique=False)
    op.create_table('permissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_permissions_name'), 'permissions', ['name'], unique=True)
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=True)
    op.create_table('bim_model_versions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('change_description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('change_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('file_url', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('checksum', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('total_area', sa.Float(), nullable=True),
    sa.Column('total_volume', sa.Float(), nullable=True),
    sa.Column('floor_count', sa.Integer(), nullable=True),
    sa.Column('room_count', sa.Integer(), nullable=True),
    sa.Column('building_height', sa.Float(), nullable=True),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('bim_model_id', sa.Integer(), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['bim_model_id'], ['bim_models.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_bim_model_versions_bim_model_id'), 'bim_model_versions', ['bim_model_id'], unique=False)
    op.create_index(op.f('ix_bim_model_versions_created_by_id'), 'bim_model_versions', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_bim_model_versions_tenant_id'), 'bim_model_versions', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_bim_model_versions_version_number'), 'bim_model_versions', ['version_number'], unique=False)
    op.create_table('houses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_houses_name'), 'houses', ['name'], unique=False)
    op.create_index(op.f('ix_houses_tenant_id'), 'houses', ['tenant_id'], unique=False)
    op.create_table('role_permissions',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('role_id', 'permission_id')
    )
    op.create_table('user_permissions',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'permission_id')
    )
    op.create_table('user_roles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('user_tenant_roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('role', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_tenant_roles_tenant_id'), 'user_tenant_roles', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_user_tenant_roles_user_id'), 'user_tenant_roles', ['user_id'], unique=False)
    op.create_table('main_areas',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('house_id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['house_id'], ['houses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_main_areas_name'), 'main_areas', ['name'], unique=False)
    op.create_index(op.f('ix_main_areas_tenant_id'), 'main_areas', ['tenant_id'], unique=False)
    op.create_table('node_areas',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('category', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('has_physical_tag', sa.Boolean(), nullable=False),
    sa.Column('house_id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['house_id'], ['houses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_node_areas_category'), 'node_areas', ['category'], unique=False)
    op.create_index(op.f('ix_node_areas_name'), 'node_areas', ['name'], unique=False)
    op.create_index(op.f('ix_node_areas_tenant_id'), 'node_areas', ['tenant_id'], unique=False)
    op.create_table('rooms',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('room_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('capacity', sa.Integer(), nullable=True),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('house_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['house_id'], ['houses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_rooms_name'), 'rooms', ['name'], unique=False)
    op.create_index(op.f('ix_rooms_tenant_id'), 'rooms', ['tenant_id'], unique=False)
    op.create_table('user_houses',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('house_id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('role_in_house', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('permissions', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['house_id'], ['houses.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'house_id')
    )
    op.create_index(op.f('ix_user_houses_tenant_id'), 'user_houses', ['tenant_id'], unique=False)
    op.create_table('bookings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('room_id', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['room_id'], ['rooms.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_bookings_tenant_id'), 'bookings', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_bookings_title'), 'bookings', ['title'], unique=False)
    op.create_table('nodes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('nfc_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('house_id', sa.Integer(), nullable=False),
    sa.Column('room_id', sa.Integer(), nullable=True),
    sa.Column('node_area_id', sa.Integer(), nullable=True),
    sa.Column('main_area_id', sa.Integer(), nullable=True),
    sa.Column('is_master_node', sa.Boolean(), nullable=False),
    sa.Column('has_physical_tag', sa.Boolean(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['house_id'], ['houses.id'], ),
    sa.ForeignKeyConstraint(['main_area_id'], ['main_areas.id'], ),
    sa.ForeignKeyConstraint(['node_area_id'], ['node_areas.id'], ),
    sa.ForeignKeyConstraint(['room_id'], ['rooms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_nodes_nfc_id'), 'nodes', ['nfc_id'], unique=True)
    op.create_index(op.f('ix_nodes_tenant_id'), 'nodes', ['tenant_id'], unique=False)
    op.create_table('audio_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('node_id', sa.Integer(), nullable=True),
    sa.Column('house_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('audio_url', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('transcribed_text', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('response_text', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('processing_status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['house_id'], ['houses.id'], ),
    sa.ForeignKeyConstraint(['node_id'], ['nodes.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audio_logs_tenant_id'), 'audio_logs', ['tenant_id'], unique=False)
    op.create_table('documents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('file_url', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('file_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('checksum', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('is_encrypted', sa.Boolean(), nullable=False),
    sa.Column('house_id', sa.Integer(), nullable=True),
    sa.Column('node_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['house_id'], ['houses.id'], ),
    sa.ForeignKeyConstraint(['node_id'], ['nodes.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_documents_tenant_id'), 'documents', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_documents_title'), 'documents', ['title'], unique=False)
    op.create_table('maintenance_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('maintenance_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('priority', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('node_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('scheduled_date', sa.DateTime(), nullable=True),
    sa.Column('completed_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['node_id'], ['nodes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_maintenance_records_tenant_id'), 'maintenance_records', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_maintenance_records_title'), 'maintenance_records', ['title'], unique=False)
    op.create_table('physical_activators',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sa.Enum('NFC', 'BLE', 'QR_CODE', 'CUSTOM', name='activatortype'), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('linked_node_id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Uuid(), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('location', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('installation_date', sa.DateTime(), nullable=True),
    sa.Column('last_maintenance', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['linked_node_id'], ['nodes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_physical_activators_tenant_id'), 'physical_activators', ['tenant_id'], unique=False)
    op.create_table('document_versions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('file_path', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('checksum', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=True),
    sa.Column('bim_model_id', sa.Integer(), nullable=True),
    sa.Column('created_by_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['bim_model_id'], ['bim_models.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_document_versions_bim_model_id'), 'document_versions', ['bim_model_id'], unique=False)
    op.create_index(op.f('ix_document_versions_created_by_id'), 'document_versions', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_document_versions_document_id'), 'document_versions', ['document_id'], unique=False)
    op.create_index(op.f('ix_document_versions_version_number'), 'document_versions', ['version_number'], unique=False)
    op.drop_table('booking')
    op.drop_table('house')
    op.add_column('users', sa.Column('tenant_id', sa.Uuid(), nullable=False))
    op.add_column('users', sa.Column('role', sqlmodel.sql.sqltypes.AutoString(), nullable=False))
    op.add_column('users', sa.Column('mfa_enabled', sa.Boolean(), nullable=False))
    op.add_column('users', sa.Column('mfa_secret', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'last_login',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_constraint(op.f('users_username_key'), 'users', type_='unique')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_tenant_id'), 'users', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_tenant_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=False)
    op.create_unique_constraint(op.f('users_username_key'), 'users', ['username'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'last_login',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('users', 'mfa_secret')
    op.drop_column('users', 'mfa_enabled')
    op.drop_column('users', 'role')
    op.drop_column('users', 'tenant_id')
    op.create_table('house',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('house_owner_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('house_pkey'))
    )
    op.create_table('booking',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('room_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('notes', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('booking_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('booking_pkey'))
    )
    op.drop_index(op.f('ix_document_versions_version_number'), table_name='document_versions')
    op.drop_index(op.f('ix_document_versions_document_id'), table_name='document_versions')
    op.drop_index(op.f('ix_document_versions_created_by_id'), table_name='document_versions')
    op.drop_index(op.f('ix_document_versions_bim_model_id'), table_name='document_versions')
    op.drop_table('document_versions')
    op.drop_index(op.f('ix_physical_activators_tenant_id'), table_name='physical_activators')
    op.drop_table('physical_activators')
    op.drop_index(op.f('ix_maintenance_records_title'), table_name='maintenance_records')
    op.drop_index(op.f('ix_maintenance_records_tenant_id'), table_name='maintenance_records')
    op.drop_table('maintenance_records')
    op.drop_index(op.f('ix_documents_title'), table_name='documents')
    op.drop_index(op.f('ix_documents_tenant_id'), table_name='documents')
    op.drop_table('documents')
    op.drop_index(op.f('ix_audio_logs_tenant_id'), table_name='audio_logs')
    op.drop_table('audio_logs')
    op.drop_index(op.f('ix_nodes_tenant_id'), table_name='nodes')
    op.drop_index(op.f('ix_nodes_nfc_id'), table_name='nodes')
    op.drop_table('nodes')
    op.drop_index(op.f('ix_bookings_title'), table_name='bookings')
    op.drop_index(op.f('ix_bookings_tenant_id'), table_name='bookings')
    op.drop_table('bookings')
    op.drop_index(op.f('ix_user_houses_tenant_id'), table_name='user_houses')
    op.drop_table('user_houses')
    op.drop_index(op.f('ix_rooms_tenant_id'), table_name='rooms')
    op.drop_index(op.f('ix_rooms_name'), table_name='rooms')
    op.drop_table('rooms')
    op.drop_index(op.f('ix_node_areas_tenant_id'), table_name='node_areas')
    op.drop_index(op.f('ix_node_areas_name'), table_name='node_areas')
    op.drop_index(op.f('ix_node_areas_category'), table_name='node_areas')
    op.drop_table('node_areas')
    op.drop_index(op.f('ix_main_areas_tenant_id'), table_name='main_areas')
    op.drop_index(op.f('ix_main_areas_name'), table_name='main_areas')
    op.drop_table('main_areas')
    op.drop_index(op.f('ix_user_tenant_roles_user_id'), table_name='user_tenant_roles')
    op.drop_index(op.f('ix_user_tenant_roles_tenant_id'), table_name='user_tenant_roles')
    op.drop_table('user_tenant_roles')
    op.drop_table('user_roles')
    op.drop_table('user_permissions')
    op.drop_table('role_permissions')
    op.drop_index(op.f('ix_houses_tenant_id'), table_name='houses')
    op.drop_index(op.f('ix_houses_name'), table_name='houses')
    op.drop_table('houses')
    op.drop_index(op.f('ix_bim_model_versions_version_number'), table_name='bim_model_versions')
    op.drop_index(op.f('ix_bim_model_versions_tenant_id'), table_name='bim_model_versions')
    op.drop_index(op.f('ix_bim_model_versions_created_by_id'), table_name='bim_model_versions')
    op.drop_index(op.f('ix_bim_model_versions_bim_model_id'), table_name='bim_model_versions')
    op.drop_table('bim_model_versions')
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('ix_permissions_name'), table_name='permissions')
    op.drop_table('permissions')
    op.drop_index(op.f('ix_bim_models_tenant_id'), table_name='bim_models')
    op.drop_index(op.f('ix_bim_models_name'), table_name='bim_models')
    op.drop_table('bim_models')
    op.drop_index(op.f('ix_ai_interactions_user_id'), table_name='ai_interactions')
    op.drop_index(op.f('ix_ai_interactions_tenant_id'), table_name='ai_interactions')
    op.drop_index(op.f('ix_ai_interactions_session_id'), table_name='ai_interactions')
    op.drop_table('ai_interactions')
    # ### end Alembic commands ###
